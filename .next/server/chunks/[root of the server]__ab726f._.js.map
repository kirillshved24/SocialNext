{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  isAdmin: { type: Boolean, default: false },\r\n});\r\n\r\nexport default mongoose.models.User || mongoose.model('User', userSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACvD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,SAAS;QAAE,MAAM;QAAS,SAAS;IAAM;AAC3C;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/lib/auth.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst SECRET_KEY = process.env.SECRET_KEY || 'your_secret_key';\r\n\r\nexport const generateToken = (payload) => {\r\n  return jwt.sign(payload, SECRET_KEY, { expiresIn: '1h' });\r\n};\r\n\r\nexport const verifyToken = (token) => {\r\n  try {\r\n    return jwt.verify(token, SECRET_KEY);\r\n  } catch (err) {\r\n    throw new Error('Неверный или истекший токен');\r\n  }\r\n};"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,MAAM,gBAAgB,CAAC;IAC5B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,KAAK;QACZ,MAAM,IAAI,MAAM;IAClB;AACF"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/lib/db.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGO_URI = 'mongodb+srv://kirillshved96:hsX2bhLX1uR9M8yf@socialnext.5uzui.mongodb.net/?retryWrites=true&w=majority&appName=SocialNext';\r\n\r\nlet isConnected = false;\r\n\r\nconst connectDB = async () => {\r\n  if (isConnected) {\r\n    console.log('Используется существующее подключение к MongoDB');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const connection = await mongoose.connect(MONGO_URI);\r\n    isConnected = !!connection.connections[0].readyState;\r\n    console.log('Подключено к MongoDB');\r\n  } catch (error) {\r\n    console.error('Ошибка подключения к MongoDB:', error);\r\n\r\n    // Специфическая обработка для ENODATA\r\n    if (error.code === 'ENODATA') {\r\n      console.error(\r\n        'Ошибка DNS. Проверьте строку подключения (MONGO_URI) и убедитесь, что ваш кластер MongoDB доступен. Если используется MongoDB Atlas, убедитесь, что вы указали правильный \"cluster-url\".'\r\n      );\r\n    }\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;AAElB,IAAI,cAAc;AAElB,MAAM,YAAY;IAChB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,aAAa,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAC1C,cAAc,CAAC,CAAC,WAAW,WAAW,CAAC,EAAE,CAAC,UAAU;QACpD,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,sCAAsC;QACtC,IAAI,MAAM,IAAI,KAAK,WAAW;YAC5B,QAAQ,KAAK,CACX;QAEJ;QAEA,MAAM;IACR;AACF;uCAEe"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/app/api/users/route.js"],"sourcesContent":["import User from '@/models/User';\r\nimport { generateToken } from '@/lib/auth';\r\nimport connectDB from '@/lib/db';\r\n\r\n// Обработчик POST-запросов для регистрации пользователя\r\nexport async function POST(req) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { username, password, email } = await req.json();\r\n\r\n    if (!username || !password || !email) {\r\n      return new Response(\r\n        JSON.stringify({ error: 'Все поля обязательны' }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    // Проверяем, существует ли пользователь с таким же username или email\r\n    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n    if (existingUser) {\r\n      return new Response(\r\n        JSON.stringify({ error: 'Пользователь с таким username или email уже существует' }),\r\n        { status: 409, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    // Создаём нового пользователя\r\n    const newUser = new User({ username, password, email });\r\n    await newUser.save();\r\n\r\n    // Генерируем JWT\r\n    const token = generateToken({ id: newUser._id, username: newUser.username });\r\n\r\n    // Устанавливаем куки с токеном\r\n    const headers = new Headers();\r\n    headers.append(\r\n      'Set-Cookie',\r\n      `authorization=Bearer ${token}; HttpOnly; Path=/; Max-Age=3600;`\r\n    );\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    // Отправляем успешный ответ\r\n    return new Response(JSON.stringify(newUser), { status: 201, headers });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка при регистрации', details: error.message }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n}\r\n\r\n// Обработчик GET-запросов для получения списка пользователей\r\nexport async function GET(req) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { searchParams } = new URL(req.url);\r\n    const currentUser = searchParams.get('currentUser');\r\n\r\n    if (!currentUser) {\r\n      return new Response(\r\n        JSON.stringify({ error: 'currentUser не указан' }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    // Находим всех пользователей, кроме текущего\r\n    const users = await User.find({ username: { $ne: currentUser } });\r\n\r\n    return new Response(JSON.stringify(users), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка при загрузке пользователей', details: error.message }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n}\r\n\r\n// Обработчик OPTIONS-запросов\r\nexport function OPTIONS() {\r\n  return new Response(null, {\r\n    status: 204,\r\n    headers: {\r\n      Allow: 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpD,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO;YACpC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAuB,IAC/C;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,sEAAsE;QACtE,MAAM,eAAe,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE,KAAK;gBAAC;oBAAE;gBAAS;gBAAG;oBAAE;gBAAM;aAAE;QAAC;QACzE,IAAI,cAAc;YAChB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAyD,IACjF;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,8BAA8B;QAC9B,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;YAAE;YAAU;YAAU;QAAM;QACrD,MAAM,QAAQ,IAAI;QAElB,iBAAiB;QACjB,MAAM,QAAQ,CAAA,GAAA,oHAAA,CAAA,gBAAa,AAAD,EAAE;YAAE,IAAI,QAAQ,GAAG;YAAE,UAAU,QAAQ,QAAQ;QAAC;QAE1E,+BAA+B;QAC/B,MAAM,UAAU,IAAI;QACpB,QAAQ,MAAM,CACZ,cACA,CAAC,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;QAElE,QAAQ,MAAM,CAAC,gBAAgB;QAE/B,4BAA4B;QAC5B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;YAAE,QAAQ;YAAK;QAAQ;IACtE,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAA0B,SAAS,MAAM,OAAO;QAAC,IACzE;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF;AAGO,eAAe,IAAI,GAAG;IAC3B,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,cAAc,aAAa,GAAG,CAAC;QAErC,IAAI,CAAC,aAAa;YAChB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAwB,IAChD;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,6CAA6C;QAC7C,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI,CAAC;YAAE,UAAU;gBAAE,KAAK;YAAY;QAAE;QAE/D,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,QAAQ;YACzC,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAAqC,SAAS,MAAM,OAAO;QAAC,IACpF;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF;AAGO,SAAS;IACd,OAAO,IAAI,SAAS,MAAM;QACxB,QAAQ;QACR,SAAS;YACP,OAAO;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}