{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/models/Friend.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst friendSchema = new mongoose.Schema({\r\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\r\n  friendId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\r\n});\r\n\r\nexport default mongoose.models.Friend || mongoose.model('Friend', friendSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,QAAQ;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC5E,UAAU;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;AAChF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/lib/auth.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst SECRET_KEY = process.env.SECRET_KEY || 'your_secret_key';\r\n\r\nexport const generateToken = (payload) => {\r\n  return jwt.sign(payload, SECRET_KEY, { expiresIn: '1h' });\r\n};\r\n\r\nexport const verifyToken = (token) => {\r\n  try {\r\n    return jwt.verify(token, SECRET_KEY);\r\n  } catch (err) {\r\n    throw new Error('Неверный или истекший токен');\r\n  }\r\n};"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,MAAM,gBAAgB,CAAC;IAC5B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,KAAK;QACZ,MAAM,IAAI,MAAM;IAClB;AACF"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/lib/db.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGO_URI = 'mongodb+srv://kirillshved96:hsX2bhLX1uR9M8yf@socialnext.5uzui.mongodb.net/?retryWrites=true&w=majority&appName=SocialNext';\r\n\r\nlet isConnected = false;\r\n\r\nconst connectDB = async () => {\r\n  if (isConnected) {\r\n    console.log('Используется существующее подключение к MongoDB');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const connection = await mongoose.connect(MONGO_URI);\r\n    isConnected = !!connection.connections[0].readyState;\r\n    console.log('Подключено к MongoDB');\r\n  } catch (error) {\r\n    console.error('Ошибка подключения к MongoDB:', error);\r\n\r\n    // Специфическая обработка для ENODATA\r\n    if (error.code === 'ENODATA') {\r\n      console.error(\r\n        'Ошибка DNS. Проверьте строку подключения (MONGO_URI) и убедитесь, что ваш кластер MongoDB доступен. Если используется MongoDB Atlas, убедитесь, что вы указали правильный \"cluster-url\".'\r\n      );\r\n    }\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;AAElB,IAAI,cAAc;AAElB,MAAM,YAAY;IAChB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,aAAa,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAC1C,cAAc,CAAC,CAAC,WAAW,WAAW,CAAC,EAAE,CAAC,UAAU;QACpD,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,sCAAsC;QACtC,IAAI,MAAM,IAAI,KAAK,WAAW;YAC5B,QAAQ,KAAK,CACX;QAEJ;QAEA,MAAM;IACR;AACF;uCAEe"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/app/api/friends/route.js"],"sourcesContent":["import Friend from '@/models/Friend';\r\nimport { verifyToken } from '@/lib/auth';\r\nimport connectDB from '@/lib/db';\r\n\r\n// Метод GET для получения списка друзей\r\nexport async function GET(req) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { authorization } = req.headers;\r\n    if (!authorization) {\r\n      return new Response(JSON.stringify({ error: 'Токен авторизации обязателен' }), { status: 401 });\r\n    }\r\n\r\n    const token = authorization.split(' ')[1];\r\n    const decoded = verifyToken(token);\r\n\r\n    const friends = await Friend.find({ userId: decoded.id }).populate('friendId');\r\n    return new Response(JSON.stringify(friends), { status: 200 });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка получения друзей', details: error.message }),\r\n      { status: 401 }\r\n    );\r\n  }\r\n}\r\n\r\n// Метод POST для добавления нового друга\r\nexport async function POST(req) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { authorization } = req.headers;\r\n    if (!authorization) {\r\n      return new Response(JSON.stringify({ error: 'Токен авторизации обязателен' }), { status: 401 });\r\n    }\r\n\r\n    const token = authorization.split(' ')[1];\r\n    const decoded = verifyToken(token);\r\n\r\n    const body = await req.json();\r\n    const { friendId } = body;\r\n\r\n    if (!friendId) {\r\n      return new Response(JSON.stringify({ error: 'friendId обязателен' }), { status: 400 });\r\n    }\r\n\r\n    const newFriend = new Friend({ userId: decoded.id, friendId });\r\n    await newFriend.save();\r\n    return new Response(JSON.stringify(newFriend), { status: 201 });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка добавления друга', details: error.message }),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAG;IAC3B,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,OAAO;QACrC,IAAI,CAAC,eAAe;YAClB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA+B,IAAI;gBAAE,QAAQ;YAAI;QAC/F;QAEA,MAAM,QAAQ,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE;QACzC,MAAM,UAAU,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QAE5B,MAAM,UAAU,MAAM,yHAAA,CAAA,UAAM,CAAC,IAAI,CAAC;YAAE,QAAQ,QAAQ,EAAE;QAAC,GAAG,QAAQ,CAAC;QACnE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;YAAE,QAAQ;QAAI;IAC7D,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAA2B,SAAS,MAAM,OAAO;QAAC,IAC1E;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,OAAO;QACrC,IAAI,CAAC,eAAe;YAClB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA+B,IAAI;gBAAE,QAAQ;YAAI;QAC/F;QAEA,MAAM,QAAQ,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE;QACzC,MAAM,UAAU,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QAE5B,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,GAAG;QAErB,IAAI,CAAC,UAAU;YACb,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAsB,IAAI;gBAAE,QAAQ;YAAI;QACtF;QAEA,MAAM,YAAY,IAAI,yHAAA,CAAA,UAAM,CAAC;YAAE,QAAQ,QAAQ,EAAE;YAAE;QAAS;QAC5D,MAAM,UAAU,IAAI;QACpB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,YAAY;YAAE,QAAQ;QAAI;IAC/D,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAA2B,SAAS,MAAM,OAAO;QAAC,IAC1E;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}