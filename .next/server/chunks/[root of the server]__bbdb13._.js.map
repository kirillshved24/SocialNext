{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  isAdmin: { type: Boolean, default: false },\r\n});\r\n\r\nexport default mongoose.models.User || mongoose.model('User', userSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACvD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,SAAS;QAAE,MAAM;QAAS,SAAS;IAAM;AAC3C;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/lib/db.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGO_URI = 'mongodb+srv://kirillshved96:hsX2bhLX1uR9M8yf@socialnext.5uzui.mongodb.net/?retryWrites=true&w=majority&appName=SocialNext';\r\n\r\nlet isConnected = false;\r\n\r\nconst connectDB = async () => {\r\n  if (isConnected) {\r\n    console.log('Используется существующее подключение к MongoDB');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const connection = await mongoose.connect(MONGO_URI);\r\n    isConnected = !!connection.connections[0].readyState;\r\n    console.log('Подключено к MongoDB');\r\n  } catch (error) {\r\n    console.error('Ошибка подключения к MongoDB:', error);\r\n\r\n    // Специфическая обработка для ENODATA\r\n    if (error.code === 'ENODATA') {\r\n      console.error(\r\n        'Ошибка DNS. Проверьте строку подключения (MONGO_URI) и убедитесь, что ваш кластер MongoDB доступен. Если используется MongoDB Atlas, убедитесь, что вы указали правильный \"cluster-url\".'\r\n      );\r\n    }\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;AAElB,IAAI,cAAc;AAElB,MAAM,YAAY;IAChB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,aAAa,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QAC1C,cAAc,CAAC,CAAC,WAAW,WAAW,CAAC,EAAE,CAAC,UAAU;QACpD,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,sCAAsC;QACtC,IAAI,MAAM,IAAI,KAAK,WAAW;YAC5B,QAAQ,KAAK,CACX;QAEJ;QAEA,MAAM;IACR;AACF;uCAEe"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://D%3A/SocialNext/my-app/src/app/api/users/route.js"],"sourcesContent":["import User from '@/models/User';\r\nimport connectDB from '@/lib/db';\r\n\r\n// Метод GET для получения всех пользователей\r\nexport async function GET() {\r\n  try {\r\n    await connectDB();\r\n    const users = await User.find();\r\n    return new Response(JSON.stringify(users), { status: 200 });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка получения списка пользователей', details: error.message }),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Метод POST для создания нового пользователя\r\nexport async function POST(req) {\r\n  try {\r\n    await connectDB();\r\n    const body = await req.json();\r\n    const { username, password, email, isAdmin } = body;\r\n\r\n    if (!username || !password || !email) {\r\n      return new Response(JSON.stringify({ error: 'Все поля обязательны' }), { status: 400 });\r\n    }\r\n\r\n    const newUser = new User({ username, password, email, isAdmin });\r\n    await newUser.save();\r\n    return new Response(JSON.stringify(newUser), { status: 201 });\r\n  } catch (error) {\r\n    return new Response(\r\n      JSON.stringify({ error: 'Ошибка при регистрации', details: error.message }),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI;QAC7B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,QAAQ;YAAE,QAAQ;QAAI;IAC3D,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAAyC,SAAS,MAAM,OAAO;QAAC,IACxF;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE/C,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO;YACpC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAuB,IAAI;gBAAE,QAAQ;YAAI;QACvF;QAEA,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;YAAE;YAAU;YAAU;YAAO;QAAQ;QAC9D,MAAM,QAAQ,IAAI;QAClB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;YAAE,QAAQ;QAAI;IAC7D,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAA0B,SAAS,MAAM,OAAO;QAAC,IACzE;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}